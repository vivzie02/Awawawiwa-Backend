/*
 * Quiz API
 *
 * This is a simple server for managing quiz questions
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using com.awawawiwa.DTOs;
using com.awawawiwa.Services;
using IO.Swagger.Attributes;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Data.Entity.Core;
using System.IO;
using System.Security.Claims;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }

        /// <summary>
        /// Login a user
        /// </summary>
        /// <param name="userInputDTO"></param>
        /// <response code="200">Login successful</response>
        /// <response code="401">Invalid username or password</response>
        [HttpPost]
        [Route("/v1/users/login")]
        [ValidateModelState]
        [SwaggerOperation("LoginUser")]
        [SwaggerResponse(200, "Login successful")]
        [SwaggerResponse(401, "Invalid username or password")]
        public virtual async Task<IActionResult> LoginUserAsync([FromBody] UserInputDTO userInputDTO)
        {
            try
            {
                var token = await _userService.LoginUserAsync(userInputDTO);
                return Ok(new { token });
            }
            catch (ObjectNotFoundException ex)
            {
                return Unauthorized(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = ex.Message });
            }
            catch (IOException ex)
            {
                // Log the exception (ex) here if needed
                return StatusCode(500, new { message = "Internal Server Error" });
            }
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully created new user</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="409">Db Conflict</response>
        [HttpPost]
        [Route("/v1/users")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 201, description: "Successfully created new user")]
        [SwaggerResponse(statusCode: 500, description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 409, description: "Db Conflict")]
        public virtual async Task<IActionResult> CreateUserAsync([FromBody] UserInputDTO body)
        {
            try
            {
                await _userService.CreateUserAsync(body);
                return Ok();
            }
            catch (ArgumentException ex)
            {
                return Conflict(new { message = ex.Message });
            }
            catch (IOException ex)
            {
                // Log the exception (ex) here if needed
                return StatusCode(500, new { message = "Internal Server Error" });
            }
        }

        /// <summary>
        /// Delete User
        /// </summary>
        /// <param name="userId"></param>
        /// <response code="201">Successfully deleted user</response>
        /// <response code="500">Internal Server Error</response>
        /// <response code="404">User not found</response>
        [HttpDelete]
        [Route("/v1/users/{userId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        [SwaggerResponse(statusCode: 201, description: "Successfully deleted user")]
        [SwaggerResponse(statusCode: 403, description: "Forbidden - can't delete other users")]
        [SwaggerResponse(statusCode: 500, description: "Internal Server Error")]
        [SwaggerResponse(statusCode: 404, description: "User not found")]
        public virtual async Task<IActionResult> DeleteUserAsync(Guid userId)
        {
            var loggedInUserId = User.FindFirstValue("NameIdentifier");
            if (loggedInUserId != userId.ToString())
            {
                return Unauthorized(new { message = "You cannot delete other users" });
            }

            try
            {
                await _userService.DeleteUserAsync(userId);
                return Ok();
            }
            catch (ObjectNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }
    }
}
