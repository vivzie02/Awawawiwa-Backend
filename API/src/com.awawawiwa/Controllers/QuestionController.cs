/*
 * Quiz API
 *
 * This is a simple server for managing quiz questions
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using com.awawawiwa.DTOs;
using com.awawawiwa.Services;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    [Route("v1/questions")]
    public class QuestionController : ControllerBase
    {
        private readonly IQuestionService _questionService;

        /// <summary>
        /// Constructor
        /// </summary>
        public QuestionController(IQuestionService questionService)
        {
            _questionService = questionService;
        }

        /// <summary>
        /// Create a new question
        /// </summary>
        /// <param name="questionInputDTO"></param>
        /// <response code="201">Successfully created new question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CreateQuestion")]
        public virtual async Task<IActionResult> CreateQuestionAsync([FromBody] QuestionInputDTO questionInputDTO)
        {
            var userId = User.FindFirst("userId")?.Value;
            var result = await _questionService.CreateQuestionAsync(questionInputDTO, userId);

            if (!result.Success)
            {
                return Conflict(new { message = result.ErrorMessage });
            }

            return Ok();
        }

        /// <summary>
        /// Get Question by id
        /// </summary>
        /// <param name="questionId"></param>
        /// <response code="200">A question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet("{questionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetQuestionById")]
        [SwaggerResponse(200, description: "Get question by id")]
        [SwaggerResponse(404, description: "Question not found")]
        [SwaggerResponse(403, description: "Not logged in")]
        public virtual async Task<IActionResult> GetQuestionByIdAsync(Guid questionId)
        {
            var question = await _questionService.GetQuestionByIdAsync(questionId);

            if (question == null)
            {
                return NotFound(new { message = "Question not found" });
            }

            return Ok(question);
        }

        /// <summary>
        /// Get Question by id
        /// </summary>
        /// <param name="questionId"></param>
        /// <response code="200">A question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete("{questionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteQuestionById")]
        [SwaggerResponse(200, description: "Successfully deleted question")]
        [SwaggerResponse(404, description: "Question not found")]
        [SwaggerResponse(403, description: "Not logged in")]
        public virtual async Task<IActionResult> DeleteQuestionByIdAsync(Guid questionId)
        {
            var loggedInUser = User.FindFirst("userId")?.Value;

            var result = await _questionService.DeleteQuestionByIdAsync(questionId, loggedInUser);

            if (!result.Success)
            {
                if (result.ErrorCode == "QuestionNotFound")
                {
                    return NotFound(new { message = result.ErrorMessage });
                }
                else if (result.ErrorCode == "NotAuthorized")
                {
                    return Unauthorized(new { message = result.ErrorMessage });
                }
            }

            return Ok();
        }

        /// <summary>
        /// Get random question
        /// </summary>
        /// <response code="200">A question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet("random")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRandomQuestion")]
        [SwaggerResponse(statusCode: 200, description: "Get a random question")]
        public virtual async Task<IActionResult> GetRandomQuestionAsync()
        {
            var question = await _questionService.GetRandomQuestionAsync();

            if (question == null)
            {
                return NotFound(new { message = "No questions found" });
            }

            return Ok(question);
        }

        /// <summary>
        /// Get random question from category
        /// </summary>
        /// <param name="category"></param>
        /// <response code="200">A list of questions</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet("random/{category}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetRandomQuestionByCategory")]
        [SwaggerResponse(statusCode: 200, description: "Get random question from category")]
        public virtual async Task<IActionResult> GetRandomQuestionByCategoryAsync([FromRoute][Required] string category)
        {
            var question = await _questionService.GetRandomQuestionByCategoryAsync(category);

            if(question == null)
            {
                return NotFound(new { message = "No questions found" });
            }

            return Ok(question);
        }

        /// <summary>
        /// update question
        /// </summary>
        /// <param name="questionId"></param>
        /// <param name="questionInputDTO"></param>
        /// <response code="200">A list of questions</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPatch("{questionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateQuestion")]
        [SwaggerResponse(statusCode: 200, description: "Get random question from category")]
        public virtual async Task<IActionResult> UpdateQuestion([FromRoute][Required] Guid questionId, [FromBody] QuestionInputDTO questionInputDTO)
        {
            var loggedInUser = User.FindFirst("userId")?.Value;

            var result = await _questionService.UpdateQuestionAsync(questionId, loggedInUser, questionInputDTO);

            if (!result.Success)
            {
                if(result.ErrorCode == "QuestionNotFound")
                {
                    return NotFound(new { message = result.ErrorMessage });
                }
                else if (result.ErrorCode == "NotAuthorized")
                {
                    return Unauthorized(new { message = result.ErrorMessage });
                }
            }

            return Ok();
        }

        /// <summary>
        /// get questions by userId
        /// </summary>
        /// <response code="200">A list of questions</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet("user")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("QuestionsRandomCategoryGet")]
        [SwaggerResponse(statusCode: 200, description: "Get random question from category")]
        public virtual async Task<IActionResult> GetQuestionsByUserIdAsync()
        {
            var loggedInUser = User.FindFirst("userId")?.Value;

            var questionOutputDTOs = await _questionService.GetQuestionsByUserIdAsync(Guid.Parse(loggedInUser));

            return Ok(questionOutputDTOs);
        }
    }
}
