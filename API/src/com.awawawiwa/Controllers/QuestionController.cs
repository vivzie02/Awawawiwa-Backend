/*
 * Quiz API
 *
 * This is a simple server for managing quiz questions
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class QuestionController : ControllerBase
    {
        /// <summary>
        /// Get all questions
        /// </summary>
        /// <response code="200">A list of questions</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1/questions")]
        [ValidateModelState]
        [SwaggerOperation("QuestionsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Question>), description: "A list of questions")]
        public virtual IActionResult QuestionsGet()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Question>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n}, {\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Question>>(exampleJson)
            : default(List<Question>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new question
        /// </summary>
        /// <param name="body"></param>
        /// <response code="201">Successfully created new question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/v1/questions")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("QuestionsPost")]
        public virtual IActionResult QuestionsPost([FromBody] Question body)
        {
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Question by id
        /// </summary>
        /// <param name="questionId"></param>
        /// <response code="200">A question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1/questions/{questionId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("QuestionsQuestionIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Question), description: "A question")]
        public virtual IActionResult QuestionsQuestionIdGet([FromRoute][Required] string questionId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Question));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Question>(exampleJson)
            : default(Question);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get random question from category
        /// </summary>
        /// <param name="category"></param>
        /// <response code="200">A list of questions</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1/questions/random/{category}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("QuestionsRandomCategoryGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Question>), description: "A list of questions")]
        public virtual IActionResult QuestionsRandomCategoryGet([FromRoute][Required] string category)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Question>));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n}, {\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Question>>(exampleJson)
            : default(List<Question>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get random question
        /// </summary>
        /// <response code="200">A question</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/v1/questions/random")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("QuestionsRandomGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Question), description: "A question")]
        public virtual IActionResult QuestionsRandomGet()
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Question));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"Answer\" : \"Paris\",\n  \"Type\" : \"Multiple Choice\",\n  \"questionId\" : \"550e8400-e29b-41d4-a716-446655440000\",\n  \"Category\" : \"History\",\n  \"Question\" : \"What is the capital of France?\"\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Question>(exampleJson)
            : default(Question);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
